# 09 用两个栈实现队列
# 栈 后进先出
# 队列 先进先出
# 题目链接：https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/
class CQueue:
    # 时间复杂度：对于插入和删除操作，时间复杂度均为 O(1)。每个元素只会「至多被插入和弹出 stack2 一次」，因此均摊下来每个元素被删除的时间复杂度仍为 O(1)。
    # 空间复杂度：O(n) 需要使用两个栈存储已有的元素.

    def __init__(self):
        # 初始值 两个空栈
        self.stack1=[]
        self.stack2=[]

    def appendTail(self, value: int) -> None:
        # 输入
        self.stack1.append(value)

    def deleteHead(self) -> int:
        # 删除
        # 若stack2不为空
        if self.stack2:
            return self.stack2.pop()
        # 若stack2为空 且stack1为空
        if not self.stack1:
            return -1
        # 若stack2为空 但stack1不为空
        while self.stack1:
            self.stack2.append(self.stack1.pop())
        return self.stack2.pop()



# Your CQueue object will be instantiated and called as such:
# obj = CQueue()
# obj.appendTail(value)
# param_2 = obj.deleteHead()
