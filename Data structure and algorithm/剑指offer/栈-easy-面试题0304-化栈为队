# 栈-easy-面试题0304-化栈为队
# 题目链接：https://leetcode-cn.com/problems/implement-queue-using-stacks-lcci/

class MyQueue:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.stack1=[]
        self.stack2=[]

    def push(self, x: int) -> None:
        """
        Push element x to the back of queue.
        """
        self.stack1.append(x)


    def pop(self) -> int:
        """
        Removes the element from in front of queue and returns that element.
        """
        if not self.stack2:
            while self.stack1:
                self.stack2.append(self.stack1.pop())
        return self.stack2.pop() if self.stack2 else False


    def peek(self) -> int:
        """
        Get the front element.
        """
        if not self.stack2:
            while self.stack1:
                self.stack2.append(self.stack1.pop())
        return self.stack2[-1] if self.stack2 else False



    def empty(self) -> bool:
        """
        Returns whether the queue is empty.
        """
        if len(self.stack1) == 0 and len(self.stack2) == 0 :return True
        else:return False



# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()
# ---------------------------------
class MyQueue:
    # 一个列表实现

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.a = []

    def push(self, x: int) -> None:
        """
        Push element x to the back of queue.
        """
        self.a.append(x)

    def pop(self) -> int:
        """
        Removes the element from in front of queue and returns that element.
        """
        n = self.a[0]
        self.a = self.a[1:]
        return n

    def peek(self) -> int:
        """
        Get the front element.
        """
        return self.a[0]

    def empty(self) -> bool:
        """
        Returns whether the queue is empty.
        """
        return True if not self.a else False
