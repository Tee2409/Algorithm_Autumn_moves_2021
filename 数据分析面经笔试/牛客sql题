-- 每个人最近的登陆日期（一）单表
select max(date) as date0
from login
group by user_id
order by user_id
-- 每个人最近的登陆日期（二）连接表
select user.name as u_n, client.name as c_n, MAX(date) as d
from login 
join user on login.user_id=user.id
join client on login.client_id=client.id
group by login.user_id order by user.name;
-- 每个人最近的登陆日期（三）新用户次日留存率
select round(count(distinct user_id)*1.0/(select count(distinct user_id) from login),3)
from login
where (user_id, date) in 
(select user_id, date(min(date),'+1 day') from login group by user_id)
-- 每个人最近的登陆日期（四）每个日期登陆新用户个数
select login.date,ifnull(n1.new_num,0)
from login 
left join 
(select l1.date,count(distinct l1.user_id) as new_num
from login l1
where l1.date =
(select min(date) from login where user_id=l1.user_id)
group by l1.date) n1
on login.date = n1.date
group by login.date order by login.date
-- 每个人最近的登陆日期（五）每个日期新用户次日留存率
select l1.date as date , 
case when count(l1.date = l3.date or null) = 0 
then 0.0 -- 新用户为0
else
round(count(l2.user_id=l1.user_id and l1.date = l3.date or null)*1.000/ count(l1.date = l3.date or null),3)
end as p
from login as l1 left join login as l2 
on date(l1.date,'+1 day') = l2.date and l1.user_id = l2.user_id
left join (select user_id,min(date)as date from login  group by user_id) as l3
on l3.user_id =l1.user_id and l3.date =l1.date
group by l1.date
order by l1.date
-- 每个人最近的登陆日期（六）每个用户每一天刷题通过数据
--统计一下牛客每个用户每一天的刷题通过数据
--包括用户的名字，以及用户用的设备的名字，用户刷题通过总数
--不存在没有登录却刷题的情况，但是存在登录了没刷题的情况，不会存在刷题表里面
--有提交代码没有通过的情况，但是会记录在刷题表里，只不过通过数目是0
select a.u_n, a.c_n, pn.date as date,
sum(pn.number)over(partition by pn.user_id order by pn.date)as ps_num
from
(
    select login.user_id, user.name as u_n, client.name as c_n, login.date
    from user 
    join login  on login.user_id=user.id 
    join client on client.id=login.client_id
 )as a left join
passing_number pn on a.user_id=pn.user_id and a.date=pn.date
where pn.number is not null
order by pn.date,a.u_n

-- 异常的邮件概率
select email.date,round(sum(case email.type when'completed' then 0 else 1 end)*1.0/count(email.type),3) as p
from email
where email.send_id in (select id from user where is_blacklist==0)
and email.receive_id in (select id from user where is_blacklist==0)
group by email.date

-- 刷题通过的题目排名
-- 参考 https://www.cnblogs.com/shizhijie/p/9366247.html
-- select RANK() OVER(order by [UserId]) as rank,* from [Order] 
-- RANK 1 1 3 3 5 6
-- select ROW_NUMBER() OVER(order by [SubTime] desc) as row_num,* from [Order]
-- ROW_NUMBER 1 2 3 4 5 6
-- select DENSE_RANK() OVER(order by [UserId]) as den_rank,* from [Order]
-- DENSE_RANK 1 1 2 2 3 4
-- select NTILE(4) OVER(order by [SubTime] desc) as ntile,* from [Order]
select p.id,p.number,DENSE_RANK() over(order by number desc)
from passing_number p
order by number desc,id asc

-- 考试前2分的学生
select grade_id as id, name, score
from 
(select g.id as grade_id, l.name, g.score, l.id as language_id, dense_rank() over (partition by name order by score desc) as "r"
from grade as g
inner join language as l on g.language_id = l.id) as tmp
where r <= 2
order by name asc, score desc, grade_id asc;

-- 获取当前薪水第二多的员工信息
select a.emp_no,a.salary
from (select emp_no,salary,dense_rank() over(order by salary desc) as rank
from salaries
where to_date='9999-01-01') a
where rank == 2

-- 出现3次以上相同积分的情况
select number
from grade
group by number
having count(number)>=3

-- 找到每个人的任务
select person.id,person.name,task.content
from person
left join task on person.id = task.person_id
order by person.id

-- 查找所有员工的last_name和first_name以及对应的dept_name，也包括暂时没有分配部门的员工
select e.last_name,e.first_name,d2.dept_name
from employees e
left join dept_emp d on e.emp_no=d.emp_no
left join departments d2 on d.dept_no=d2.dept_no
